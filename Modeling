
agg_df = df_filtered.groupby(['start_station_name', 'hour', 'day_of_week', 'month']) \
                    .size().reset_index(name='trip_count')

# One-hot encode categorical variables
agg_encoded = pd.get_dummies(agg_df, columns=['start_station_name', 'day_of_week', 'month'], drop_first=True)

X = agg_encoded.drop(columns=['trip_count'])
y = agg_encoded['trip_count']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluate model
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

r2 = r2_score(y_test, y_pred)
print(f"RMSE: {rmse:.2f}")
print(f"R²: {r2:.2f}")

# prediction vs actual plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel('Actual Trip Count')
plt.ylabel('Predicted Trip Count')
plt.title('Predicted vs Actual Station Activity')
plt.tight_layout()
plt.show()

# Create DataFrame with feature names and coefficients
coefs_df = pd.DataFrame({
    'Feature': X.columns,
    'Coefficient': model.coef_
})

# Clean up feature names
coefs_df['Feature'] = coefs_df['Feature'].str.replace('start_station_name_', '', regex=False)

# Get top 15 features by absolute value
top_features = coefs_df.reindex(coefs_df.Coefficient.abs().sort_values(ascending=False).index).head(15)

# Plot
plt.figure(figsize=(12, 8))
sns.barplot(data=top_features, x='Coefficient', y='Feature', palette='viridis')
plt.title('Top 15 Predictive Features')
plt.tight_layout()
plt.savefig('feature_importance_cleaned.png')
plt.show()

from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# MODEL 1: KNN REGRESSION
knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(X_train, y_train)
y_knn_pred = knn.predict(X_test)

rmse_knn = np.sqrt(mean_squared_error(y_test, y_knn_pred))
r2_knn = r2_score(y_test, y_knn_pred)

print(f"KNN RMSE: {rmse_knn:.2f}")
print(f"KNN R²: {r2_knn:.2f}")

# MODEL 2: DECISION TREE REGRESSION
tree = DecisionTreeRegressor(max_depth=5, random_state=42)
tree.fit(X_train, y_train)
y_tree_pred = tree.predict(X_test)

rmse_tree = np.sqrt(mean_squared_error(y_test, y_tree_pred))
r2_tree = r2_score(y_test, y_tree_pred)

print(f"Decision Tree RMSE: {rmse_tree:.2f}")
print(f"Decision Tree R²: {r2_tree:.2f}")


def plot_predictions(y_true, y_pred, title, filename):
    plt.figure(figsize=(8, 6))
    sns.scatterplot(x=y_true, y=y_pred, alpha=0.4)
    plt.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()], 'r--')
    plt.title(title)
    plt.xlabel('Actual Trip Count')
    plt.ylabel('Predicted Trip Count')
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(filename)
    plt.show()

plot_predictions(y_test, y_knn_pred, "KNN: Predicted vs Actual", "knn_pred_vs_actual.png")
plot_predictions(y_test, y_tree_pred, "Decision Tree (Depth=5): Predicted vs Actual", "tree_pred_vs_actual.png")


top_stations = df_filtered['start_station_name'].value_counts().head(50).index
saturday_hours = list(range(24))

# Build prediction input: all station-hour combinations
future_df = pd.DataFrame([(station, hour, 'Saturday', 'May') for station in top_stations for hour in saturday_hours],
                         columns=['start_station_name', 'hour', 'day_of_week', 'month'])

# One-hot encode future data
future_encoded = pd.get_dummies(future_df, columns=['start_station_name', 'day_of_week', 'month'], drop_first=True)

# Align with training columns
missing_cols = set(X.columns) - set(future_encoded.columns)
for col in missing_cols:
    future_encoded[col] = 0
future_encoded = future_encoded[X.columns]

# Predict using your trained model (e.g., KNN)
future_df['predicted_trip_count'] = knn.predict(future_encoded)

# Find busiest station per hour
busiest_per_hour = future_df.loc[future_df.groupby('hour')['predicted_trip_count'].idxmax()]

plt.figure(figsize=(12, 8))
sns.barplot(data=busiest_per_hour, x='hour', y='predicted_trip_count', hue='start_station_name')
plt.title('Predicted Busiest Station by Hour (Next Saturday)')
plt.xlabel('Hour of Day')
plt.ylabel('Predicted Trip Count')
plt.legend(title='Station', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.savefig('busiest_station_per_hour_next_saturday.png')
plt.show()

busiest_per_hour[['hour', 'start_station_name', 'predicted_trip_count']]
